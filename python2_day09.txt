函数的形参定义方式：
　位置形参
　星号元祖形参
　命名关键字形参
　双星好字典形参

位置形参：
　　语法：
　　　　def 函数名(形参名１,形参名２,...):
   　　　　　语句块
   作用：
   　　收集多合的位置传参

命名关键字形参
  语法：
    def 函数名(*,命名关键字形参):
        语句
  作用：
    所有的参数都必须用关键字传参或字典关键字传参传递
  示例见：
    09_name_
def fn(*,a,b):   #此处*号为传参方式标识符，不占传参位置
    print('a=',a)
    print('b=',b)
fn(a=110,b=200)

双星号字典形参：
  语法：
   def 函数名(**字典形参名):
       语句
   作用：
     收集多合的关键字传参
   说明：
   通常关键字名定为kwargs
   示例见：
   10_star_star_dict_kwargs.py

函数的参数说明：
  缺省参数，位置形参，星号元组形参，命名关键字形参和双星号自定形参可以混合使用
函数参数自左至右的顺序为：
  位置形参
  星号元组形参
  命名关键字形参
  双星号字典形参
综合eg：
 def f1(a,b,*args,c,**kwargs):
      print(args)
      print(kwargs)
f1(1,2,3,4,d=5,c=6,e=7)
f1(*"hello",d=6,**{'c':5,'e':7})

 函数的不定长参数：
   def fn(*args,**kwargs):
       pass
    # 可以接受任意的位置传参和关键字传参

day09 回顾
函数
  def fn():
      pass
fn #根据fn变量返回函数的引用关系
fn() #  返回调用函数后的引用关系

v1 = fn # v1 绑定 fn绑定的函数
v2 = fn() # v2 绑定 none

return 语句
  作用：
    终止当前函数的执行，返回到的调用的地方
    返回一个对象的引用关系


参数的传递方式：
  1.位置传参(先)
       序列传参

  2.关键字传参(后)
       字典关键字传参
   eg:
   def fn(a,b,c)
      pass
   fn(1,2,3)
   fn(a=1,b=2,c=3)
   fn(1,c=3,b=2)  # right
   fn(a=1,b=2,3)  # flase


函数的形参的定义方式（四者位置不能颠倒）：
    位置形参
        星号元组形参（多余位置形参）
    命名关键字形参
        双星号字典形参

缺省参数：
  



day10 笔记
全局变量和局部变量

局部变量：
   定义在函数内部的变量成为局部变量（函数的形参也是局部变量）
   局部变量只能在函数内部使用
   局部变量在函数调用时才能够被创建，在函数调用之后才会自动销毁

全局变量
   定义才函数外部，模块内部的变量
   全局变量，所有的函数都可以直接访问（但函数内部不能将其直接赋值）

eg:01_variable.py  # 不能访问局部变量，函数内部会创建局部变量，不能修改全局变量

局部变量说明：
  1.在函数内首次对变量赋值是创建局部变量，再次为变量赋值是修改局部变量的绑定关系
  2.在函数内部的赋值语句不会对全局变量造成影响
  3.局部变量只能在其被声明的函数内部访问，而全局变量可以在整个模块范围内访问


globals  and locals 函数
    globals()  返回当前全局作用域内变量的字典
    locals()   返回当前局部作用域内变量的字典


eg:
a = 1
b = 2
c = 3
def f1(c,d):
    e = 300
    print("locals()返回:",locals())
    print("----------------------")
    print("globals()返回:",globals())
    print("----------------------")
    print(globals()['c'])
    print("----------------------")
    for k,v in globals().items():
        print(k,"-->",v)

f1(100,200)
#dict.items():访问字典的元组数组
# list.sort():进行正向排序
# list.sort(reverse=True):进行反向排序

猴子摘桃：
def get_yesterday(y):
    #　根据今天的桃子数y，计算昨天的桃子数x
    x = (y + 1) * 2
    return x
p = 1 # 第10天的桃子数
day = 10 # 用来表示当前是第几天
while day > 1:
    day -= 1
    p = get_yesterday(p)
    print("第",day,"天的桃子数是：　",p)


range（）函数内部运行：
def myrange(start,stop=None,step=1):
    if stop is None:
        stop = start
        start = 0
    L = []
    i = start
    while i < stop:
        L.append(i)
        i += step
    return L
L = myrange(3)
print(L)
L = myrange(3,6)
print(L)
L = myrange(1,10,3)
print(L)

完全数：
 方法１
# i = 1# 　完全数的开始值
# while True:
#     L =[]
#     for x in range(1,i):
#         if i % x == 0:
#             L.append(x)
#     if sum(L) == i:
#         print(i,"是完全数!!!")
#     i += 1

函数变量
  函数名是变量，它在创建函数是绑定一个函数

示例：
  def f1():
      print("")

